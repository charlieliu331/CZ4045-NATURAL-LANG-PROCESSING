{"nbformat":4,"nbformat_minor":0,"metadata":{"colab":{"provenance":[],"collapsed_sections":[]},"kernelspec":{"name":"python3","display_name":"Python 3"},"language_info":{"name":"python"}},"cells":[{"cell_type":"code","execution_count":1,"metadata":{"id":"I2Ci4_P00k3U","executionInfo":{"status":"ok","timestamp":1667463774607,"user_tz":-480,"elapsed":10523,"user":{"displayName":"Srishti Arora","userId":"07102621941680546095"}},"colab":{"base_uri":"https://localhost:8080/"},"outputId":"06aeec2c-fe62-4cdf-c9ec-30408089e4d9"},"outputs":[{"output_type":"stream","name":"stdout","text":["Looking in indexes: https://pypi.org/simple, https://us-python.pkg.dev/colab-wheels/public/simple/\n","Requirement already satisfied: tensorflow-addons in /usr/local/lib/python3.7/dist-packages (0.18.0)\n","Requirement already satisfied: typeguard>=2.7 in /usr/local/lib/python3.7/dist-packages (from tensorflow-addons) (2.7.1)\n","Requirement already satisfied: packaging in /usr/local/lib/python3.7/dist-packages (from tensorflow-addons) (21.3)\n","Requirement already satisfied: pyparsing!=3.0.5,>=2.0.2 in /usr/local/lib/python3.7/dist-packages (from packaging->tensorflow-addons) (3.0.9)\n"]}],"source":["import pandas as pd\n","import numpy as np\n","import matplotlib.pyplot as plt\n","%matplotlib inline\n","import seaborn as sns\n","\n","from sklearn import metrics\n","from sklearn.metrics import confusion_matrix, ConfusionMatrixDisplay, classification_report\n","from sklearn.model_selection import train_test_split\n","from sklearn.model_selection import cross_val_score\n","\n","from sklearn import svm\n","from sklearn import tree\n","from sklearn.linear_model import LogisticRegression\n","from sklearn.ensemble import RandomForestClassifier\n","\n","\n","import gensim\n","\n","import keras\n","from keras import initializers\n","from keras.preprocessing import sequence\n","from keras.models import Sequential\n","from keras.layers import Dense, Dropout, Embedding, LSTM, Bidirectional\n","from keras.layers import *\n","from keras.models import *\n","from keras import backend as K\n","from keras.utils import pad_sequences\n","import os\n","import shutil\n","\n","import tensorflow as tf\n","import tensorflow_hub as hub\n","import pandas as pd\n","import numpy as np\n","import matplotlib.pyplot as plt\n","import keras.backend as K\n","from sklearn.model_selection import train_test_split\n","\n","!pip install tensorflow-addons\n","import tensorflow_addons as tfa\n","tf.get_logger().setLevel('ERROR')"]},{"cell_type":"code","source":["#Connecting to google drive files\n","\n","from google.colab import drive\n","drive.mount('/content/drive')"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"-QWWNQu0TrId","executionInfo":{"status":"ok","timestamp":1667463777370,"user_tz":-480,"elapsed":2771,"user":{"displayName":"Srishti Arora","userId":"07102621941680546095"}},"outputId":"b2d8cae6-49e3-40c6-ed68-28aefb39d993"},"execution_count":2,"outputs":[{"output_type":"stream","name":"stdout","text":["Drive already mounted at /content/drive; to attempt to forcibly remount, call drive.mount(\"/content/drive\", force_remount=True).\n"]}]},{"cell_type":"code","source":["filepath = '/content/drive/MyDrive/AY 22 23/S1/CZ4045 NLP/Dataset/'"],"metadata":{"id":"K9pEdgdJBPE6","executionInfo":{"status":"ok","timestamp":1667463777371,"user_tz":-480,"elapsed":31,"user":{"displayName":"Srishti Arora","userId":"07102621941680546095"}}},"execution_count":3,"outputs":[]},{"cell_type":"code","source":["df = pd.read_csv('/content/drive/MyDrive/cleaned_labelled.csv')\n","df.head()"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":337},"id":"9bVFsOZOTuBJ","executionInfo":{"status":"ok","timestamp":1667463777372,"user_tz":-480,"elapsed":30,"user":{"displayName":"Srishti Arora","userId":"07102621941680546095"}},"outputId":"8d360e1e-e2e5-4e38-fde1-cb189eb2657f"},"execution_count":4,"outputs":[{"output_type":"execute_result","data":{"text/plain":["                                       Original_Text  \\\n","0  \"He then went on to tell me about what the US ...   \n","1  Im crying, but I know you dont need my tears. ...   \n","2  Most successful first-world countries have alm...   \n","3  Look at Scandinavian countries too. Many have ...   \n","4  what an incredibly stale and ignorant take on ...   \n","\n","                                        Cleaned_Text  \\\n","0  he then went on to tell me about what the us w...   \n","1  im crying but i know you dont need my tears im...   \n","2  most successful firstworld countries have almo...   \n","3  look at scandinavian countries too many have p...   \n","4  what an incredibly stale and ignorant take on ...   \n","\n","                                     Lemmatized_Text  \\\n","0  went tell u like back started turn onward form...   \n","1  im cry know dont need tear im praying voice re...   \n","2  successful firstworld country almost completel...   \n","3  look scandinavian country many permitting requ...   \n","4  incredibly stale ignorant take gun violence am...   \n","\n","                                        Stemmed_Text  Label  \n","0  went tell us like back start turn onward form ...      0  \n","1  im cri know dont need tear im pray voic reach ...      1  \n","2  success firstworld countri almost complet ban ...      1  \n","3  look scandinavian countri mani permit requir b...     -1  \n","4  incred stale ignor take gun violenc america li...      1  "],"text/html":["\n","  <div id=\"df-6794b4a5-23ba-4897-8669-7d85873ea335\">\n","    <div class=\"colab-df-container\">\n","      <div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>Original_Text</th>\n","      <th>Cleaned_Text</th>\n","      <th>Lemmatized_Text</th>\n","      <th>Stemmed_Text</th>\n","      <th>Label</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>0</th>\n","      <td>\"He then went on to tell me about what the US ...</td>\n","      <td>he then went on to tell me about what the us w...</td>\n","      <td>went tell u like back started turn onward form...</td>\n","      <td>went tell us like back start turn onward form ...</td>\n","      <td>0</td>\n","    </tr>\n","    <tr>\n","      <th>1</th>\n","      <td>Im crying, but I know you dont need my tears. ...</td>\n","      <td>im crying but i know you dont need my tears im...</td>\n","      <td>im cry know dont need tear im praying voice re...</td>\n","      <td>im cri know dont need tear im pray voic reach ...</td>\n","      <td>1</td>\n","    </tr>\n","    <tr>\n","      <th>2</th>\n","      <td>Most successful first-world countries have alm...</td>\n","      <td>most successful firstworld countries have almo...</td>\n","      <td>successful firstworld country almost completel...</td>\n","      <td>success firstworld countri almost complet ban ...</td>\n","      <td>1</td>\n","    </tr>\n","    <tr>\n","      <th>3</th>\n","      <td>Look at Scandinavian countries too. Many have ...</td>\n","      <td>look at scandinavian countries too many have p...</td>\n","      <td>look scandinavian country many permitting requ...</td>\n","      <td>look scandinavian countri mani permit requir b...</td>\n","      <td>-1</td>\n","    </tr>\n","    <tr>\n","      <th>4</th>\n","      <td>what an incredibly stale and ignorant take on ...</td>\n","      <td>what an incredibly stale and ignorant take on ...</td>\n","      <td>incredibly stale ignorant take gun violence am...</td>\n","      <td>incred stale ignor take gun violenc america li...</td>\n","      <td>1</td>\n","    </tr>\n","  </tbody>\n","</table>\n","</div>\n","      <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-6794b4a5-23ba-4897-8669-7d85873ea335')\"\n","              title=\"Convert this dataframe to an interactive table.\"\n","              style=\"display:none;\">\n","        \n","  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n","       width=\"24px\">\n","    <path d=\"M0 0h24v24H0V0z\" fill=\"none\"/>\n","    <path d=\"M18.56 5.44l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94zm-11 1L8.5 8.5l.94-2.06 2.06-.94-2.06-.94L8.5 2.5l-.94 2.06-2.06.94zm10 10l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94z\"/><path d=\"M17.41 7.96l-1.37-1.37c-.4-.4-.92-.59-1.43-.59-.52 0-1.04.2-1.43.59L10.3 9.45l-7.72 7.72c-.78.78-.78 2.05 0 2.83L4 21.41c.39.39.9.59 1.41.59.51 0 1.02-.2 1.41-.59l7.78-7.78 2.81-2.81c.8-.78.8-2.07 0-2.86zM5.41 20L4 18.59l7.72-7.72 1.47 1.35L5.41 20z\"/>\n","  </svg>\n","      </button>\n","      \n","  <style>\n","    .colab-df-container {\n","      display:flex;\n","      flex-wrap:wrap;\n","      gap: 12px;\n","    }\n","\n","    .colab-df-convert {\n","      background-color: #E8F0FE;\n","      border: none;\n","      border-radius: 50%;\n","      cursor: pointer;\n","      display: none;\n","      fill: #1967D2;\n","      height: 32px;\n","      padding: 0 0 0 0;\n","      width: 32px;\n","    }\n","\n","    .colab-df-convert:hover {\n","      background-color: #E2EBFA;\n","      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n","      fill: #174EA6;\n","    }\n","\n","    [theme=dark] .colab-df-convert {\n","      background-color: #3B4455;\n","      fill: #D2E3FC;\n","    }\n","\n","    [theme=dark] .colab-df-convert:hover {\n","      background-color: #434B5C;\n","      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n","      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n","      fill: #FFFFFF;\n","    }\n","  </style>\n","\n","      <script>\n","        const buttonEl =\n","          document.querySelector('#df-6794b4a5-23ba-4897-8669-7d85873ea335 button.colab-df-convert');\n","        buttonEl.style.display =\n","          google.colab.kernel.accessAllowed ? 'block' : 'none';\n","\n","        async function convertToInteractive(key) {\n","          const element = document.querySelector('#df-6794b4a5-23ba-4897-8669-7d85873ea335');\n","          const dataTable =\n","            await google.colab.kernel.invokeFunction('convertToInteractive',\n","                                                     [key], {});\n","          if (!dataTable) return;\n","\n","          const docLinkHtml = 'Like what you see? Visit the ' +\n","            '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n","            + ' to learn more about interactive tables.';\n","          element.innerHTML = '';\n","          dataTable['output_type'] = 'display_data';\n","          await google.colab.output.renderOutput(dataTable, element);\n","          const docLink = document.createElement('div');\n","          docLink.innerHTML = docLinkHtml;\n","          element.appendChild(docLink);\n","        }\n","      </script>\n","    </div>\n","  </div>\n","  "]},"metadata":{},"execution_count":4}]},{"cell_type":"markdown","source":["# Processing Subjectivity and Polarity of Labels"],"metadata":{"id":"QOnkiVC0WcSO"}},{"cell_type":"markdown","source":["Logic for generating values within Polarity and Subjectivity labels:\n","\n","Subjectivity is checking whether the statement is opinionated or neutral hence labels with 0 is categorized as neutral (0) and (1, -1) is categorized as opinionated (1) \n","\n","Polarity neutral and negative opinions (0, -1) is categorized as negative (0) and 1 as positive (1). "],"metadata":{"id":"Y5MTrtPf1LxJ"}},{"cell_type":"code","source":["#Creating new coulmns Subjectivity and Polarity\n","df[\"Polarity\"] = df['Label']\n","df[\"Subjectivity\"] = df['Label']\n","\n","#Generating values for Polarity and Subjectivity\n","df['Subjectivity'] = np.where((df['Label'] == -1), 1, df['Subjectivity'])\n","df['Polarity'] = np.where((df['Label'] == -1), 0, df['Polarity'])\n"," \n","#Add csv value to columns\n","df.to_csv('final_output.csv', index=False)\n","df.head()"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":424},"id":"7mtLMXQIWb5y","executionInfo":{"status":"ok","timestamp":1667463777373,"user_tz":-480,"elapsed":27,"user":{"displayName":"Srishti Arora","userId":"07102621941680546095"}},"outputId":"2ac3ee73-0135-4107-a5e8-0e49472409d0"},"execution_count":5,"outputs":[{"output_type":"execute_result","data":{"text/plain":["                                       Original_Text  \\\n","0  \"He then went on to tell me about what the US ...   \n","1  Im crying, but I know you dont need my tears. ...   \n","2  Most successful first-world countries have alm...   \n","3  Look at Scandinavian countries too. Many have ...   \n","4  what an incredibly stale and ignorant take on ...   \n","\n","                                        Cleaned_Text  \\\n","0  he then went on to tell me about what the us w...   \n","1  im crying but i know you dont need my tears im...   \n","2  most successful firstworld countries have almo...   \n","3  look at scandinavian countries too many have p...   \n","4  what an incredibly stale and ignorant take on ...   \n","\n","                                     Lemmatized_Text  \\\n","0  went tell u like back started turn onward form...   \n","1  im cry know dont need tear im praying voice re...   \n","2  successful firstworld country almost completel...   \n","3  look scandinavian country many permitting requ...   \n","4  incredibly stale ignorant take gun violence am...   \n","\n","                                        Stemmed_Text  Label  Polarity  \\\n","0  went tell us like back start turn onward form ...      0         0   \n","1  im cri know dont need tear im pray voic reach ...      1         1   \n","2  success firstworld countri almost complet ban ...      1         1   \n","3  look scandinavian countri mani permit requir b...     -1         0   \n","4  incred stale ignor take gun violenc america li...      1         1   \n","\n","   Subjectivity  \n","0             0  \n","1             1  \n","2             1  \n","3             1  \n","4             1  "],"text/html":["\n","  <div id=\"df-c720ccd3-68c5-4e74-8ef6-70637092e0c5\">\n","    <div class=\"colab-df-container\">\n","      <div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>Original_Text</th>\n","      <th>Cleaned_Text</th>\n","      <th>Lemmatized_Text</th>\n","      <th>Stemmed_Text</th>\n","      <th>Label</th>\n","      <th>Polarity</th>\n","      <th>Subjectivity</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>0</th>\n","      <td>\"He then went on to tell me about what the US ...</td>\n","      <td>he then went on to tell me about what the us w...</td>\n","      <td>went tell u like back started turn onward form...</td>\n","      <td>went tell us like back start turn onward form ...</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","    </tr>\n","    <tr>\n","      <th>1</th>\n","      <td>Im crying, but I know you dont need my tears. ...</td>\n","      <td>im crying but i know you dont need my tears im...</td>\n","      <td>im cry know dont need tear im praying voice re...</td>\n","      <td>im cri know dont need tear im pray voic reach ...</td>\n","      <td>1</td>\n","      <td>1</td>\n","      <td>1</td>\n","    </tr>\n","    <tr>\n","      <th>2</th>\n","      <td>Most successful first-world countries have alm...</td>\n","      <td>most successful firstworld countries have almo...</td>\n","      <td>successful firstworld country almost completel...</td>\n","      <td>success firstworld countri almost complet ban ...</td>\n","      <td>1</td>\n","      <td>1</td>\n","      <td>1</td>\n","    </tr>\n","    <tr>\n","      <th>3</th>\n","      <td>Look at Scandinavian countries too. Many have ...</td>\n","      <td>look at scandinavian countries too many have p...</td>\n","      <td>look scandinavian country many permitting requ...</td>\n","      <td>look scandinavian countri mani permit requir b...</td>\n","      <td>-1</td>\n","      <td>0</td>\n","      <td>1</td>\n","    </tr>\n","    <tr>\n","      <th>4</th>\n","      <td>what an incredibly stale and ignorant take on ...</td>\n","      <td>what an incredibly stale and ignorant take on ...</td>\n","      <td>incredibly stale ignorant take gun violence am...</td>\n","      <td>incred stale ignor take gun violenc america li...</td>\n","      <td>1</td>\n","      <td>1</td>\n","      <td>1</td>\n","    </tr>\n","  </tbody>\n","</table>\n","</div>\n","      <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-c720ccd3-68c5-4e74-8ef6-70637092e0c5')\"\n","              title=\"Convert this dataframe to an interactive table.\"\n","              style=\"display:none;\">\n","        \n","  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n","       width=\"24px\">\n","    <path d=\"M0 0h24v24H0V0z\" fill=\"none\"/>\n","    <path d=\"M18.56 5.44l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94zm-11 1L8.5 8.5l.94-2.06 2.06-.94-2.06-.94L8.5 2.5l-.94 2.06-2.06.94zm10 10l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94z\"/><path d=\"M17.41 7.96l-1.37-1.37c-.4-.4-.92-.59-1.43-.59-.52 0-1.04.2-1.43.59L10.3 9.45l-7.72 7.72c-.78.78-.78 2.05 0 2.83L4 21.41c.39.39.9.59 1.41.59.51 0 1.02-.2 1.41-.59l7.78-7.78 2.81-2.81c.8-.78.8-2.07 0-2.86zM5.41 20L4 18.59l7.72-7.72 1.47 1.35L5.41 20z\"/>\n","  </svg>\n","      </button>\n","      \n","  <style>\n","    .colab-df-container {\n","      display:flex;\n","      flex-wrap:wrap;\n","      gap: 12px;\n","    }\n","\n","    .colab-df-convert {\n","      background-color: #E8F0FE;\n","      border: none;\n","      border-radius: 50%;\n","      cursor: pointer;\n","      display: none;\n","      fill: #1967D2;\n","      height: 32px;\n","      padding: 0 0 0 0;\n","      width: 32px;\n","    }\n","\n","    .colab-df-convert:hover {\n","      background-color: #E2EBFA;\n","      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n","      fill: #174EA6;\n","    }\n","\n","    [theme=dark] .colab-df-convert {\n","      background-color: #3B4455;\n","      fill: #D2E3FC;\n","    }\n","\n","    [theme=dark] .colab-df-convert:hover {\n","      background-color: #434B5C;\n","      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n","      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n","      fill: #FFFFFF;\n","    }\n","  </style>\n","\n","      <script>\n","        const buttonEl =\n","          document.querySelector('#df-c720ccd3-68c5-4e74-8ef6-70637092e0c5 button.colab-df-convert');\n","        buttonEl.style.display =\n","          google.colab.kernel.accessAllowed ? 'block' : 'none';\n","\n","        async function convertToInteractive(key) {\n","          const element = document.querySelector('#df-c720ccd3-68c5-4e74-8ef6-70637092e0c5');\n","          const dataTable =\n","            await google.colab.kernel.invokeFunction('convertToInteractive',\n","                                                     [key], {});\n","          if (!dataTable) return;\n","\n","          const docLinkHtml = 'Like what you see? Visit the ' +\n","            '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n","            + ' to learn more about interactive tables.';\n","          element.innerHTML = '';\n","          dataTable['output_type'] = 'display_data';\n","          await google.colab.output.renderOutput(dataTable, element);\n","          const docLink = document.createElement('div');\n","          docLink.innerHTML = docLinkHtml;\n","          element.appendChild(docLink);\n","        }\n","      </script>\n","    </div>\n","  </div>\n","  "]},"metadata":{},"execution_count":5}]},{"cell_type":"markdown","source":["#Converting Text using Doc2Vec\n","\n","Learn paragraph and document embeddings via the distributed memory and distributed bag of words models"],"metadata":{"id":"pi25ROi2poXL"}},{"cell_type":"code","source":["def convert_doc2vec(df, col):\n","  def tagged_document(list_of_list_of_words):\n","      for i, list_of_words in enumerate(list_of_list_of_words):\n","        yield gensim.models.doc2vec.TaggedDocument(list_of_words, [i])\n","  data_training = list(tagged_document(df[col]))\n","  model = gensim.models.doc2vec.Doc2Vec(data_training, vector_size=40, window=10, min_count=2, workers=4)\n","\n","  data = df[col].apply(model.infer_vector)\n","  df2 = pd.DataFrame(data.tolist(), columns = [str(i) for i in range(1, 41)])\n","  df2[[\"Label\", \"Polarity\", \"Subjectivity\"]] = df[[\"Label\", \"Polarity\", \"Subjectivity\"]].copy()\n","\n","  return df2"],"metadata":{"id":"tsC8qF5rK-jE","executionInfo":{"status":"ok","timestamp":1667463777374,"user_tz":-480,"elapsed":26,"user":{"displayName":"Srishti Arora","userId":"07102621941680546095"}}},"execution_count":6,"outputs":[]},{"cell_type":"code","source":["cleaned_text_df = convert_doc2vec(df, \"Cleaned_Text\")\n","cleaned_text_df.head()"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":317},"id":"Dzo3hao-qJN9","executionInfo":{"status":"ok","timestamp":1667463783699,"user_tz":-480,"elapsed":6351,"user":{"displayName":"Srishti Arora","userId":"07102621941680546095"}},"outputId":"a4a7d115-7423-4519-9488-2be4961793e8"},"execution_count":7,"outputs":[{"output_type":"stream","name":"stderr","text":["WARNING:gensim.models.doc2vec:Each 'words' should be a list of words (usually unicode strings). First 'words' here is instead plain <class 'str'>.\n"]},{"output_type":"execute_result","data":{"text/plain":["          1         2         3         4         5         6         7  \\\n","0 -0.069309  0.030562  0.007721 -0.058430 -0.068910  0.030644  0.045611   \n","1 -0.004072  0.024622  0.016833 -0.065972 -0.044953  0.026136  0.072036   \n","2 -0.021950  0.085458  0.032073 -0.077906 -0.042033  0.056613  0.067996   \n","3 -0.071555  0.070330  0.009385 -0.204248 -0.137289  0.029059  0.038839   \n","4  0.042009  0.079208 -0.055717 -0.054783 -0.019128 -0.003091  0.095727   \n","\n","          8         9        10  ...        34        35        36        37  \\\n","0 -0.045654 -0.013832 -0.021171  ... -0.043332 -0.080177  0.098166 -0.114114   \n","1 -0.009750  0.025217 -0.001184  ... -0.009349 -0.083292  0.128646 -0.056544   \n","2 -0.062497  0.032200  0.022248  ...  0.022637 -0.035216  0.095596  0.018472   \n","3  0.062263  0.095566  0.034013  ...  0.127218  0.002959  0.164132 -0.048313   \n","4 -0.077816 -0.014155  0.084390  ...  0.017336 -0.216500  0.114746 -0.001134   \n","\n","         38        39        40  Label  Polarity  Subjectivity  \n","0 -0.200570  0.082739 -0.065717      0         0             0  \n","1 -0.079481  0.035786 -0.134889      1         1             1  \n","2 -0.081230  0.127259 -0.119408      1         1             1  \n","3 -0.022401  0.074386 -0.153761     -1         0             1  \n","4 -0.192825  0.116522 -0.178892      1         1             1  \n","\n","[5 rows x 43 columns]"],"text/html":["\n","  <div id=\"df-209721be-a086-4ee1-9198-ec49a6e622e3\">\n","    <div class=\"colab-df-container\">\n","      <div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>1</th>\n","      <th>2</th>\n","      <th>3</th>\n","      <th>4</th>\n","      <th>5</th>\n","      <th>6</th>\n","      <th>7</th>\n","      <th>8</th>\n","      <th>9</th>\n","      <th>10</th>\n","      <th>...</th>\n","      <th>34</th>\n","      <th>35</th>\n","      <th>36</th>\n","      <th>37</th>\n","      <th>38</th>\n","      <th>39</th>\n","      <th>40</th>\n","      <th>Label</th>\n","      <th>Polarity</th>\n","      <th>Subjectivity</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>0</th>\n","      <td>-0.069309</td>\n","      <td>0.030562</td>\n","      <td>0.007721</td>\n","      <td>-0.058430</td>\n","      <td>-0.068910</td>\n","      <td>0.030644</td>\n","      <td>0.045611</td>\n","      <td>-0.045654</td>\n","      <td>-0.013832</td>\n","      <td>-0.021171</td>\n","      <td>...</td>\n","      <td>-0.043332</td>\n","      <td>-0.080177</td>\n","      <td>0.098166</td>\n","      <td>-0.114114</td>\n","      <td>-0.200570</td>\n","      <td>0.082739</td>\n","      <td>-0.065717</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","    </tr>\n","    <tr>\n","      <th>1</th>\n","      <td>-0.004072</td>\n","      <td>0.024622</td>\n","      <td>0.016833</td>\n","      <td>-0.065972</td>\n","      <td>-0.044953</td>\n","      <td>0.026136</td>\n","      <td>0.072036</td>\n","      <td>-0.009750</td>\n","      <td>0.025217</td>\n","      <td>-0.001184</td>\n","      <td>...</td>\n","      <td>-0.009349</td>\n","      <td>-0.083292</td>\n","      <td>0.128646</td>\n","      <td>-0.056544</td>\n","      <td>-0.079481</td>\n","      <td>0.035786</td>\n","      <td>-0.134889</td>\n","      <td>1</td>\n","      <td>1</td>\n","      <td>1</td>\n","    </tr>\n","    <tr>\n","      <th>2</th>\n","      <td>-0.021950</td>\n","      <td>0.085458</td>\n","      <td>0.032073</td>\n","      <td>-0.077906</td>\n","      <td>-0.042033</td>\n","      <td>0.056613</td>\n","      <td>0.067996</td>\n","      <td>-0.062497</td>\n","      <td>0.032200</td>\n","      <td>0.022248</td>\n","      <td>...</td>\n","      <td>0.022637</td>\n","      <td>-0.035216</td>\n","      <td>0.095596</td>\n","      <td>0.018472</td>\n","      <td>-0.081230</td>\n","      <td>0.127259</td>\n","      <td>-0.119408</td>\n","      <td>1</td>\n","      <td>1</td>\n","      <td>1</td>\n","    </tr>\n","    <tr>\n","      <th>3</th>\n","      <td>-0.071555</td>\n","      <td>0.070330</td>\n","      <td>0.009385</td>\n","      <td>-0.204248</td>\n","      <td>-0.137289</td>\n","      <td>0.029059</td>\n","      <td>0.038839</td>\n","      <td>0.062263</td>\n","      <td>0.095566</td>\n","      <td>0.034013</td>\n","      <td>...</td>\n","      <td>0.127218</td>\n","      <td>0.002959</td>\n","      <td>0.164132</td>\n","      <td>-0.048313</td>\n","      <td>-0.022401</td>\n","      <td>0.074386</td>\n","      <td>-0.153761</td>\n","      <td>-1</td>\n","      <td>0</td>\n","      <td>1</td>\n","    </tr>\n","    <tr>\n","      <th>4</th>\n","      <td>0.042009</td>\n","      <td>0.079208</td>\n","      <td>-0.055717</td>\n","      <td>-0.054783</td>\n","      <td>-0.019128</td>\n","      <td>-0.003091</td>\n","      <td>0.095727</td>\n","      <td>-0.077816</td>\n","      <td>-0.014155</td>\n","      <td>0.084390</td>\n","      <td>...</td>\n","      <td>0.017336</td>\n","      <td>-0.216500</td>\n","      <td>0.114746</td>\n","      <td>-0.001134</td>\n","      <td>-0.192825</td>\n","      <td>0.116522</td>\n","      <td>-0.178892</td>\n","      <td>1</td>\n","      <td>1</td>\n","      <td>1</td>\n","    </tr>\n","  </tbody>\n","</table>\n","<p>5 rows × 43 columns</p>\n","</div>\n","      <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-209721be-a086-4ee1-9198-ec49a6e622e3')\"\n","              title=\"Convert this dataframe to an interactive table.\"\n","              style=\"display:none;\">\n","        \n","  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n","       width=\"24px\">\n","    <path d=\"M0 0h24v24H0V0z\" fill=\"none\"/>\n","    <path d=\"M18.56 5.44l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94zm-11 1L8.5 8.5l.94-2.06 2.06-.94-2.06-.94L8.5 2.5l-.94 2.06-2.06.94zm10 10l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94z\"/><path d=\"M17.41 7.96l-1.37-1.37c-.4-.4-.92-.59-1.43-.59-.52 0-1.04.2-1.43.59L10.3 9.45l-7.72 7.72c-.78.78-.78 2.05 0 2.83L4 21.41c.39.39.9.59 1.41.59.51 0 1.02-.2 1.41-.59l7.78-7.78 2.81-2.81c.8-.78.8-2.07 0-2.86zM5.41 20L4 18.59l7.72-7.72 1.47 1.35L5.41 20z\"/>\n","  </svg>\n","      </button>\n","      \n","  <style>\n","    .colab-df-container {\n","      display:flex;\n","      flex-wrap:wrap;\n","      gap: 12px;\n","    }\n","\n","    .colab-df-convert {\n","      background-color: #E8F0FE;\n","      border: none;\n","      border-radius: 50%;\n","      cursor: pointer;\n","      display: none;\n","      fill: #1967D2;\n","      height: 32px;\n","      padding: 0 0 0 0;\n","      width: 32px;\n","    }\n","\n","    .colab-df-convert:hover {\n","      background-color: #E2EBFA;\n","      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n","      fill: #174EA6;\n","    }\n","\n","    [theme=dark] .colab-df-convert {\n","      background-color: #3B4455;\n","      fill: #D2E3FC;\n","    }\n","\n","    [theme=dark] .colab-df-convert:hover {\n","      background-color: #434B5C;\n","      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n","      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n","      fill: #FFFFFF;\n","    }\n","  </style>\n","\n","      <script>\n","        const buttonEl =\n","          document.querySelector('#df-209721be-a086-4ee1-9198-ec49a6e622e3 button.colab-df-convert');\n","        buttonEl.style.display =\n","          google.colab.kernel.accessAllowed ? 'block' : 'none';\n","\n","        async function convertToInteractive(key) {\n","          const element = document.querySelector('#df-209721be-a086-4ee1-9198-ec49a6e622e3');\n","          const dataTable =\n","            await google.colab.kernel.invokeFunction('convertToInteractive',\n","                                                     [key], {});\n","          if (!dataTable) return;\n","\n","          const docLinkHtml = 'Like what you see? Visit the ' +\n","            '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n","            + ' to learn more about interactive tables.';\n","          element.innerHTML = '';\n","          dataTable['output_type'] = 'display_data';\n","          await google.colab.output.renderOutput(dataTable, element);\n","          const docLink = document.createElement('div');\n","          docLink.innerHTML = docLinkHtml;\n","          element.appendChild(docLink);\n","        }\n","      </script>\n","    </div>\n","  </div>\n","  "]},"metadata":{},"execution_count":7}]},{"cell_type":"markdown","source":["#Training the Classification Model\n","\n","Takes in the output vector from the doc2vec model and uses it as inputs for a regular classification model. Below, we will use logistic regression, decision tree, random forest, and SVM to attempt to classify each sample."],"metadata":{"id":"RfrpTWpjouaX"}},{"cell_type":"code","source":["def evaluate(model, x_test, y_test, predict):\n","\n","       # Confusion Matrix\n","    print(\"~-~-~-~-~-~-~-~-~-~-~-~-~- Confusion Matrix -~-~-~-~-~-~-~-~-~-~-~-~-~-\\n\")\n","    ConfusionMatrixDisplay.from_predictions(y_test, predict)\n","    plt.show()\n","    print()\n","\n","        # Evaluation Metrics\n","    print(\"~-~-~-~-~-~-~-~-~-~-~-~- Classification Report -~-~-~-~-~-~-~-~-~-~-~-~\\n\")\n","    result = classification_report(y_test, predict, digits = 3, zero_division = 0)\n","    print(result)\n","\n","        # 5 fold cross validation\n","    print(\"~-~-~-~-~-~-~-~-~-~-~-~- 5 fold Cross Validation -~-~-~-~-~-~-~-~-~-~-~\\n\")\n","    print('F1 score:         {0:0.3f}'.format(cross_val_score(model, x_test, y_test,scoring = \"f1\", cv = 5).mean()))\n","    print('Precision score:  {0:0.3f}'.format(cross_val_score(model, x_test, y_test,scoring = \"precision\", cv = 5).mean()))\n","    print('Recall score:     {0:0.3f}\\n'.format(cross_val_score(model, x_test, y_test,scoring = \"recall\", cv = 5).mean()))\n","    print(\"~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~\\n\")\n","\n","    return result"],"metadata":{"id":"CzxAxRrwt6sw","executionInfo":{"status":"ok","timestamp":1667463783700,"user_tz":-480,"elapsed":15,"user":{"displayName":"Srishti Arora","userId":"07102621941680546095"}}},"execution_count":8,"outputs":[]},{"cell_type":"code","source":["class attentionS(Layer):\n","    def __init__(self, return_sequences=True):\n","        self.return_sequences = return_sequences\n","\n","        super(attentionS,self).__init__()\n","\n","    def build(self, input_shape):\n","        self.W=self.add_weight(name=\"att_weight\", shape=(input_shape[-1],1),initializer=\"normal\")\n","        self.b=self.add_weight(name=\"att_bias\", shape=(input_shape[1],1), initializer=\"zeros\")\n","        super(attentionS,self).build(input_shape)\n","\n","\n","    def call(self, x):\n","        e = K.tanh(K.dot(x,self.W)+self.b)\n","        a = K.softmax(e, axis=1)\n","        output = x*a\n","        if self.return_sequences:\n","            return output\n","        return K.sum(output, axis=1)"],"metadata":{"id":"rRWwlIfYSW6G","executionInfo":{"status":"ok","timestamp":1667463783701,"user_tz":-480,"elapsed":14,"user":{"displayName":"Srishti Arora","userId":"07102621941680546095"}}},"execution_count":9,"outputs":[]},{"cell_type":"code","source":["def build_Att_Bi_LSTM(n_unique_words, maxlen):\n","    model = Sequential()\n","    model.add(Embedding(n_unique_words, 128, input_length=maxlen))\n","    model.add(Bidirectional(LSTM(64,return_sequences=True)))\n","    model.add(attentionS(return_sequences=False))\n","    model.add(Dropout(0.5))\n","    model.add(Dense(1, activation='sigmoid'))\n","    model.compile(loss='binary_crossentropy', optimizer='sgd') \n","    return model"],"metadata":{"id":"bvp3b4twSxDE","executionInfo":{"status":"ok","timestamp":1667464323356,"user_tz":-480,"elapsed":479,"user":{"displayName":"Srishti Arora","userId":"07102621941680546095"}}},"execution_count":24,"outputs":[]},{"cell_type":"code","source":["# Logistic Regression\n","def attBiLSTM(x, x_test, y, y_test, data_type):\n","    high = -1\n","    for i in x:\n","      if i == 'Label' or i == 'Polarity' or i == 'Subjectivity':\n","        continue\n","      else:  \n","        if int(max(i)) > high:\n","            high = int(max(i))\n","\n","    for i in x_test:\n","      if i == 'Label' or i == 'Polarity' or i == 'Subjectivity':\n","        continue\n","      else:  \n","        if int(max(i)) > high:\n","            high = int(max(i))\n","    print(high)\n","\n","    n_unique_words = high + 1 # cut texts after this number of words\n","    maxlen = 40\n","\n","    model = build_Att_Bi_LSTM(n_unique_words, maxlen)\n","    model.fit(x, y, epochs = 12)\n","\n","    # print(x.shape, y.shape)\n","    # print(x_test.shape, y_test.shape)\n","\n","    print(\"     Model: Attention based BiLSTM on Doc2Vec\")\n","    print(\"     Preprocessed Text Used: \", data_type)\n","    print()\n","    predict = model.predict(x_test)\n","    print(predict)\n","    result = evaluate(model, x_test, y_test, predict)\n","\n","    return result"],"metadata":{"id":"1ZhaAZoKpKNY","executionInfo":{"status":"ok","timestamp":1667464359956,"user_tz":-480,"elapsed":577,"user":{"displayName":"Srishti Arora","userId":"07102621941680546095"}}},"execution_count":27,"outputs":[]},{"cell_type":"code","source":["# processed_data = ['Cleaned_Text', 'Stemmed_Text', 'Lemmatized_Text']\n","# processed_df = [convert_doc2vec(df, text) for text in processed_data]\n","\n","#Count Vectorizer\n","print(\"~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~\\n\")\n","print(\"                             Count Vectorizer\")\n","print(\"~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~\\n\")\n","\n","for i in range(len(processed_data)):\n","  x, x_test, y, y_test = train_test_split(processed_df[i].iloc[: , :], processed_df[i]['Subjectivity'], test_size=0.2, random_state=28)\n","  x.drop(columns = ['Label', 'Subjectivity', 'Polarity'], inplace = True)\n","  x_test.drop(columns = ['Label', 'Subjectivity', 'Polarity'], inplace = True)\n","  attnResult = attBiLSTM(x, x_test, y, y_test, processed_data[i])\n"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":1000},"id":"lgY3p6lfpKSH","executionInfo":{"status":"error","timestamp":1667464368337,"user_tz":-480,"elapsed":8384,"user":{"displayName":"Srishti Arora","userId":"07102621941680546095"}},"outputId":"893d905d-a8dc-4ade-833e-554f528f8c00"},"execution_count":28,"outputs":[{"output_type":"stream","name":"stdout","text":["~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~\n","\n","                             Count Vectorizer\n","~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~\n","\n","9\n","Epoch 1/12\n","23/31 [=====================>........] - ETA: 0s - loss: 0.6785"]},{"output_type":"error","ename":"InvalidArgumentError","evalue":"ignored","traceback":["\u001b[0;31m---------------------------------------------------------------------------\u001b[0m","\u001b[0;31mInvalidArgumentError\u001b[0m                      Traceback (most recent call last)","\u001b[0;32m<ipython-input-28-8655bc0aa4eb>\u001b[0m in \u001b[0;36m<module>\u001b[0;34m\u001b[0m\n\u001b[1;32m     11\u001b[0m   \u001b[0mx\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mdrop\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mcolumns\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0;34m[\u001b[0m\u001b[0;34m'Label'\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m'Subjectivity'\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m'Polarity'\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0minplace\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0;32mTrue\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     12\u001b[0m   \u001b[0mx_test\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mdrop\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mcolumns\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0;34m[\u001b[0m\u001b[0;34m'Label'\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m'Subjectivity'\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m'Polarity'\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0minplace\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0;32mTrue\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m---> 13\u001b[0;31m   \u001b[0mattnResult\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mattBiLSTM\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mx\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mx_test\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0my\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0my_test\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mprocessed_data\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0mi\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m","\u001b[0;32m<ipython-input-27-f03b24504ee1>\u001b[0m in \u001b[0;36mattBiLSTM\u001b[0;34m(x, x_test, y, y_test, data_type)\u001b[0m\n\u001b[1;32m     21\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     22\u001b[0m     \u001b[0mmodel\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mbuild_Att_Bi_LSTM\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mn_unique_words\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mmaxlen\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m---> 23\u001b[0;31m     \u001b[0mmodel\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mfit\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mx\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0my\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mepochs\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0;36m12\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m     24\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     25\u001b[0m     \u001b[0;31m# print(x.shape, y.shape)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.7/dist-packages/keras/utils/traceback_utils.py\u001b[0m in \u001b[0;36merror_handler\u001b[0;34m(*args, **kwargs)\u001b[0m\n\u001b[1;32m     65\u001b[0m     \u001b[0;32mexcept\u001b[0m \u001b[0mException\u001b[0m \u001b[0;32mas\u001b[0m \u001b[0me\u001b[0m\u001b[0;34m:\u001b[0m  \u001b[0;31m# pylint: disable=broad-except\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     66\u001b[0m       \u001b[0mfiltered_tb\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0m_process_traceback_frames\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0me\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m__traceback__\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m---> 67\u001b[0;31m       \u001b[0;32mraise\u001b[0m \u001b[0me\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mwith_traceback\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mfiltered_tb\u001b[0m\u001b[0;34m)\u001b[0m \u001b[0;32mfrom\u001b[0m \u001b[0;32mNone\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m     68\u001b[0m     \u001b[0;32mfinally\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     69\u001b[0m       \u001b[0;32mdel\u001b[0m \u001b[0mfiltered_tb\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.7/dist-packages/tensorflow/python/eager/execute.py\u001b[0m in \u001b[0;36mquick_execute\u001b[0;34m(op_name, num_outputs, inputs, attrs, ctx, name)\u001b[0m\n\u001b[1;32m     53\u001b[0m     \u001b[0mctx\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mensure_initialized\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     54\u001b[0m     tensors = pywrap_tfe.TFE_Py_Execute(ctx._handle, device_name, op_name,\n\u001b[0;32m---> 55\u001b[0;31m                                         inputs, attrs, num_outputs)\n\u001b[0m\u001b[1;32m     56\u001b[0m   \u001b[0;32mexcept\u001b[0m \u001b[0mcore\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_NotOkStatusException\u001b[0m \u001b[0;32mas\u001b[0m \u001b[0me\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     57\u001b[0m     \u001b[0;32mif\u001b[0m \u001b[0mname\u001b[0m \u001b[0;32mis\u001b[0m \u001b[0;32mnot\u001b[0m \u001b[0;32mNone\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;31mInvalidArgumentError\u001b[0m: Graph execution error:\n\nDetected at node 'sequential_5/embedding_5/embedding_lookup' defined at (most recent call last):\n    File \"/usr/lib/python3.7/runpy.py\", line 193, in _run_module_as_main\n      \"__main__\", mod_spec)\n    File \"/usr/lib/python3.7/runpy.py\", line 85, in _run_code\n      exec(code, run_globals)\n    File \"/usr/local/lib/python3.7/dist-packages/ipykernel_launcher.py\", line 16, in <module>\n      app.launch_new_instance()\n    File \"/usr/local/lib/python3.7/dist-packages/traitlets/config/application.py\", line 846, in launch_instance\n      app.start()\n    File \"/usr/local/lib/python3.7/dist-packages/ipykernel/kernelapp.py\", line 612, in start\n      self.io_loop.start()\n    File \"/usr/local/lib/python3.7/dist-packages/tornado/platform/asyncio.py\", line 132, in start\n      self.asyncio_loop.run_forever()\n    File \"/usr/lib/python3.7/asyncio/base_events.py\", line 541, in run_forever\n      self._run_once()\n    File \"/usr/lib/python3.7/asyncio/base_events.py\", line 1786, in _run_once\n      handle._run()\n    File \"/usr/lib/python3.7/asyncio/events.py\", line 88, in _run\n      self._context.run(self._callback, *self._args)\n    File \"/usr/local/lib/python3.7/dist-packages/tornado/ioloop.py\", line 758, in _run_callback\n      ret = callback()\n    File \"/usr/local/lib/python3.7/dist-packages/tornado/stack_context.py\", line 300, in null_wrapper\n      return fn(*args, **kwargs)\n    File \"/usr/local/lib/python3.7/dist-packages/tornado/gen.py\", line 1233, in inner\n      self.run()\n    File \"/usr/local/lib/python3.7/dist-packages/tornado/gen.py\", line 1147, in run\n      yielded = self.gen.send(value)\n    File \"/usr/local/lib/python3.7/dist-packages/ipykernel/kernelbase.py\", line 365, in process_one\n      yield gen.maybe_future(dispatch(*args))\n    File \"/usr/local/lib/python3.7/dist-packages/tornado/gen.py\", line 326, in wrapper\n      yielded = next(result)\n    File \"/usr/local/lib/python3.7/dist-packages/ipykernel/kernelbase.py\", line 268, in dispatch_shell\n      yield gen.maybe_future(handler(stream, idents, msg))\n    File \"/usr/local/lib/python3.7/dist-packages/tornado/gen.py\", line 326, in wrapper\n      yielded = next(result)\n    File \"/usr/local/lib/python3.7/dist-packages/ipykernel/kernelbase.py\", line 545, in execute_request\n      user_expressions, allow_stdin,\n    File \"/usr/local/lib/python3.7/dist-packages/tornado/gen.py\", line 326, in wrapper\n      yielded = next(result)\n    File \"/usr/local/lib/python3.7/dist-packages/ipykernel/ipkernel.py\", line 306, in do_execute\n      res = shell.run_cell(code, store_history=store_history, silent=silent)\n    File \"/usr/local/lib/python3.7/dist-packages/ipykernel/zmqshell.py\", line 536, in run_cell\n      return super(ZMQInteractiveShell, self).run_cell(*args, **kwargs)\n    File \"/usr/local/lib/python3.7/dist-packages/IPython/core/interactiveshell.py\", line 2855, in run_cell\n      raw_cell, store_history, silent, shell_futures)\n    File \"/usr/local/lib/python3.7/dist-packages/IPython/core/interactiveshell.py\", line 2881, in _run_cell\n      return runner(coro)\n    File \"/usr/local/lib/python3.7/dist-packages/IPython/core/async_helpers.py\", line 68, in _pseudo_sync_runner\n      coro.send(None)\n    File \"/usr/local/lib/python3.7/dist-packages/IPython/core/interactiveshell.py\", line 3058, in run_cell_async\n      interactivity=interactivity, compiler=compiler, result=result)\n    File \"/usr/local/lib/python3.7/dist-packages/IPython/core/interactiveshell.py\", line 3249, in run_ast_nodes\n      if (await self.run_code(code, result,  async_=asy)):\n    File \"/usr/local/lib/python3.7/dist-packages/IPython/core/interactiveshell.py\", line 3326, in run_code\n      exec(code_obj, self.user_global_ns, self.user_ns)\n    File \"<ipython-input-28-8655bc0aa4eb>\", line 13, in <module>\n      attnResult = attBiLSTM(x, x_test, y, y_test, processed_data[i])\n    File \"<ipython-input-27-f03b24504ee1>\", line 23, in attBiLSTM\n      model.fit(x, y, epochs = 12)\n    File \"/usr/local/lib/python3.7/dist-packages/keras/utils/traceback_utils.py\", line 64, in error_handler\n      return fn(*args, **kwargs)\n    File \"/usr/local/lib/python3.7/dist-packages/keras/engine/training.py\", line 1409, in fit\n      tmp_logs = self.train_function(iterator)\n    File \"/usr/local/lib/python3.7/dist-packages/keras/engine/training.py\", line 1051, in train_function\n      return step_function(self, iterator)\n    File \"/usr/local/lib/python3.7/dist-packages/keras/engine/training.py\", line 1040, in step_function\n      outputs = model.distribute_strategy.run(run_step, args=(data,))\n    File \"/usr/local/lib/python3.7/dist-packages/keras/engine/training.py\", line 1030, in run_step\n      outputs = model.train_step(data)\n    File \"/usr/local/lib/python3.7/dist-packages/keras/engine/training.py\", line 889, in train_step\n      y_pred = self(x, training=True)\n    File \"/usr/local/lib/python3.7/dist-packages/keras/utils/traceback_utils.py\", line 64, in error_handler\n      return fn(*args, **kwargs)\n    File \"/usr/local/lib/python3.7/dist-packages/keras/engine/training.py\", line 490, in __call__\n      return super().__call__(*args, **kwargs)\n    File \"/usr/local/lib/python3.7/dist-packages/keras/utils/traceback_utils.py\", line 64, in error_handler\n      return fn(*args, **kwargs)\n    File \"/usr/local/lib/python3.7/dist-packages/keras/engine/base_layer.py\", line 1014, in __call__\n      outputs = call_fn(inputs, *args, **kwargs)\n    File \"/usr/local/lib/python3.7/dist-packages/keras/utils/traceback_utils.py\", line 92, in error_handler\n      return fn(*args, **kwargs)\n    File \"/usr/local/lib/python3.7/dist-packages/keras/engine/sequential.py\", line 374, in call\n      return super(Sequential, self).call(inputs, training=training, mask=mask)\n    File \"/usr/local/lib/python3.7/dist-packages/keras/engine/functional.py\", line 459, in call\n      inputs, training=training, mask=mask)\n    File \"/usr/local/lib/python3.7/dist-packages/keras/engine/functional.py\", line 596, in _run_internal_graph\n      outputs = node.layer(*args, **kwargs)\n    File \"/usr/local/lib/python3.7/dist-packages/keras/utils/traceback_utils.py\", line 64, in error_handler\n      return fn(*args, **kwargs)\n    File \"/usr/local/lib/python3.7/dist-packages/keras/engine/base_layer.py\", line 1014, in __call__\n      outputs = call_fn(inputs, *args, **kwargs)\n    File \"/usr/local/lib/python3.7/dist-packages/keras/utils/traceback_utils.py\", line 92, in error_handler\n      return fn(*args, **kwargs)\n    File \"/usr/local/lib/python3.7/dist-packages/keras/layers/core/embedding.py\", line 199, in call\n      out = tf.nn.embedding_lookup(self.embeddings, inputs)\nNode: 'sequential_5/embedding_5/embedding_lookup'\nindices[9,39] = -1 is not in [0, 10)\n\t [[{{node sequential_5/embedding_5/embedding_lookup}}]] [Op:__inference_train_function_22994]"]}]},{"cell_type":"code","source":[],"metadata":{"id":"fV5R7alYZVvF","executionInfo":{"status":"aborted","timestamp":1667464290426,"user_tz":-480,"elapsed":8,"user":{"displayName":"Srishti Arora","userId":"07102621941680546095"}}},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":["# Polarity Detection"],"metadata":{"id":"bGUGnOsMQpEr"}},{"cell_type":"code","source":["polarity_df = [df[df[\"Subjectivity\"] == 1].copy() for df in processed_df]\n","polarity_df[0].head()"],"metadata":{"id":"GbpRTOLayiAt","executionInfo":{"status":"aborted","timestamp":1667463811461,"user_tz":-480,"elapsed":36,"user":{"displayName":"Srishti Arora","userId":"07102621941680546095"}}},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["processed_data = ['Cleaned_Text', 'Stemmed_Text', 'Lemmatized_Text']\n","\n","#Count Vectorizer\n","print(\"~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~\\n\")\n","print(\"                             Count Vectorizer\")\n","print(\"~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~\\n\")\n","\n","for i in range(len(processed_data)):\n","  x, x_test, y, y_test = train_test_split(polarity_df[i].iloc[: , :40], polarity_df[i]['Polarity'], test_size=0.2, random_state=28)\n","\n","  LogRegResult = logReg(x, x_test, y, y_test, processed_data[i])\n","  DecTreeResult = decTree(x, x_test, y, y_test, processed_data[i])\n","  RFResult = randForest(x, x_test, y, y_test, processed_data[i])\n","  SVCResult = SVC(x, x_test, y, y_test, processed_data[i])\n"],"metadata":{"id":"LraATtuXQyKH","executionInfo":{"status":"aborted","timestamp":1667463811461,"user_tz":-480,"elapsed":36,"user":{"displayName":"Srishti Arora","userId":"07102621941680546095"}}},"execution_count":null,"outputs":[]}]}